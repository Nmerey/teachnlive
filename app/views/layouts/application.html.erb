<!DOCTYPE html>
<html>
  <head>
     <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.5.2/animate.min.css">

    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css" integrity="sha384-9gVQ4dYFwwWSjIDZnLEWnxCjeSWFphJiwGPXr1jddIhOegiu1FwO5qRGvFXOdJZ4" crossorigin="anonymous">
    <link href="https://fonts.googleapis.com/css?family=Josefin+Sans|Oswald|Oswald:700|Quicksand|Tajawal" rel="stylesheet">
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.0.13/css/all.css" integrity="sha384-DNOHZ68U8hZfKXOrtjWvjxusGo9WQnrNx2sqG0tfsghAvtVlRW3tvkXWZh58N9jp" crossorigin="anonymous">

    <%= stylesheet_link_tag 'hover' %> 
    <%= stylesheet_link_tag "main" %> 
    <%= javascript_include_tag 'application' %>
    <%= csrf_meta_tag %>
  </head>
  <!-- <style type="text/css">
    /*
  body {
    overflow: hidden;
    background: #262b2e
  }

  canvas {
    position: absolute;
    top: 0;
    left: 0;
    width: 1950px;
    height: auto; 
  }

  #canvas {
    z-index: 1;
  }
  #canvasbg {
    z-index: -10;
    -webkit-filter: blur(3px);
    -moz-filter: blur(3px);
    -o-filter: blur(3px);
    filter: blur(3px);
    opacity: 0.6;
  }*/
  </style> -->
<style>
  .menu {
    display: inline-block;
    margin: 0 auto;
    margin-top: 50px;
    list-style-type: none;
  }
  .menu a {
    display: block;
    margin: 0;
    padding: 16px 25px;
    color: #333;
    text-decoration: none;
    background-color: transparent!important;
  }
  .menu li {
    position: relative;
    float: left;
    margin: 0;
    border-left: 1px solid #eee;
    -webkit-perspective: 200;
            perspective: 200;
  }
  .menu li:first-child {
    border-left: none;
  }

  .menu li:hover > a, .menu li:focus > a {
    text-decoration: none;
    color: #fff;
    background-color: #333;
  }
  .menu li:hover:before, .menu li:focus:before {
    margin-top: 0;
    border-top-color: #333;
  }
  .menu li:hover .children, .menu li:focus .children {
    opacity: 1;
    -webkit-transform: rotateX(0) translateZ(0);
            transform: rotateX(0) translateZ(0);
  }
  .menu .children {
    opacity: 0;
    -webkit-backface-visibility: hidden;
            backface-visibility: hidden;
    -webkit-transform: rotateX(-90deg);
            transform: rotateX(-90deg);
    -webkit-transform-style: preserve-3d;
            transform-style: preserve-3d;
    -webkit-transform-origin: top center;
            transform-origin: top center;
    transition: opacity 0.1s 0.1s, -webkit-transform 0.4s cubic-bezier(0.17, 0.67, 0.59, 1.21);
    transition: transform 0.4s cubic-bezier(0.17, 0.67, 0.59, 1.21), opacity 0.1s 0.1s;
    transition: transform 0.4s cubic-bezier(0.17, 0.67, 0.59, 1.21), opacity 0.1s 0.1s, -webkit-transform 0.4s cubic-bezier(0.17, 0.67, 0.59, 1.21);
    z-index: 100;
    list-style-type: none;
    position: absolute;
    top: 100%;
    left: 0;
    width: 300px;
    margin: 0;
    padding: 10px 0;
    background-color: #fff;
    box-shadow: 0 2px 3px 0 rgba(0, 0, 0, 0.1);
    text-align: left;
  }
  .menu .children li {
    float: none;
    text-align: center;
  }
  .menu .children a {
    background-color: transparent;
  }
  .menu .children a:hover, .menu .children a:focus {
    color: #333;
    background-color: #f9f9f9;
  }

  .clearfix:after {
    visibility: hidden;
    display: block;
    font-size: 0;
    content: " ";
    clear: both;
    height: 0;
  }

  #menu:hover {
    color: transparent;
    text-decoration: none;
  } 
</style>
  <body style="background-color: black">
   <!-- <canvas id="canvas" width="1950px" height="800px"  ></canvas> -->
    <!-- <canvas id="canvasbg" width="1950px" height="800px"></canvas> -->

<div id="flash">
  <% flash.each do |key, value| %>
    <div class="alert alert-<%= key %>"><%= value %></div>
  <% end %>
</div>
<div id="header" style="z-index: 2">
  <% if current_user %>
  <ul class="menu cleafix" style="z-index: 1;left: 40%">
    <li class="parent">
      <a style="display: flex;" href="<%= lectures_path %>">
        <p id="AbsentN" class="text-white">AbsentN</p>
        <p class="animated bounceInDown" href="/" style="margin-top: 17px">
          <img src="/assets/logo3.png" width="60" height="60" class="" alt=""></p>
        <p id="T" class="text-white" href="/">T</p>
      </a>
      <ul class="children">
        <!-- <li><a style="font-size: 1.9rem" href="<%= lectures_path %>">All Lecture</a></li> -->
        <!-- <li><a style="font-size: 1.9rem" href="<%= new_student_path %>">Add Student</a></li> -->
        <!-- <li><a style="font-size: 1.9rem" href="<%= new_lecture_path %>">Create New Lecture</a></li> -->
        <!-- <li><a style="font-size: 1.9rem" href="<%= dashboard_path %>">Dashboard</a></li> -->
        <li><%= link_to t(".sign_out"),sign_out_path, method: :delete,style: "font-size: 1.9rem" %></li>
      </ul>
    </li>
  </ul>
  <% else %>
    <a id="menu" style="display: flex;left: 40%;top: 40px" href="<%= root_path %>">
      <p id="AbsentN" class="text-white">AbsentN</p>
      <p class="animated bounceInDown" href="/" style="margin-top: 17px">
        <img src="/assets/logo3.png" width="60" height="60" class="" alt=""></p>
      <p id="T" class="text-white marr" href="/">T</p>
    </a>
  <% end %>
      <!-- <nav class="navbar navbar-expand-lg navbar-light bg-transparent">
      <a href="<%= lectures_path %> " class="navbar nav-link">
        <p id="AbsentN" class="text-white">AbsentN</p>
          <p class="animated bounceInDown" href="/">
            <img src="/assets/logo3.png" width="50" height="50" class="" alt=""></p>
          <p id="T" class="text-white marr" href="/">T</p>
          
      </a>    
        

          <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
          </button>

          <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
            <ul class="navbar-nav mr-auto mt-2 mt-lg-0">
              <li class="nav-item animated bounceInLeft " id="first">
                <a class="nav-link text-white" href="<%= lectures_path %>">Attendance</a>
              </li>
              <li class="animated bounceInRight nav-item">
                <a class="nav-link text-white" href="<%= new_lecture_path %>">Create Lecture</a>
              </li>
            </ul>
          </div>


       <form class="form-inline my-2 my-lg-0">
              <ul class="navbar-nav navbar-expand-lg">
              </ul>
              <%= link_to t(".sign_out"),sign_out_path, method: :delete,:class => "btn btn-primary active my-2 my-sm-0" %>
      </form>
    </nav> -->
<!--     <nav class="navbar navbar-expand-lg navbar-light bg-transparent" style="margin-left: 10%">
      <a href="/" class="navbar nav-link" style="margin: auto;">
        <p href="/" id="AbsentN" class="text-white">AbsentN</p>
          <p class="animated bounceInDown" href="/">
            <img src="/assets/logo3.png" width="50" height="50" class="" alt=""></p>
          <p id="T" class="text-white marr" href="/">T</p>
          
      </a>
    </nav>  --> 
</div>

<div style="z-index: 1">  
  <%= yield %>
</div>

<!-- <script>
      // min and max radius, radius threshold and percentage of filled circles
    var radMin = 5,
      radMax = 125,
      filledCircle = 60, //percentage of filled circles
      concentricCircle = 30, //percentage of concentric circles
      radThreshold = 25; //IFF special, over this radius concentric, otherwise filled

    //min and max speed to move
    var speedMin = 0.3,
      speedMax = 0.4;

    //max reachable opacity for every circle and blur effect
    var maxOpacity = 0.6;

    //default palette choice
    var colors = ['52,168,83', '117,95,147', '199,108,23', '194,62,55', '0,172,212', '120,120,120'],
      bgColors = ['52,168,83', '117,95,147', '199,108,23', '194,62,55', '0,172,212', '120,120,120'],
      circleBorder = 10,
      backgroundLine = bgColors[0];
    var backgroundMlt = 0.85;

    //min distance for links
    var linkDist = Math.min(canvas.width, canvas.height) / 2.4,
      lineBorder = 2.5;

    //most importantly: number of overall circles and arrays containing them
    var maxCircles = 12,
      points = [],
      pointsBack = [];

    //populating the screen
    for (var i = 0; i < maxCircles * 2; i++) points.push(new Circle());
    for (var i = 0; i < maxCircles; i++) pointsBack.push(new Circle(true));

    //experimental vars
    var circleExp = 1,
      circleExpMax = 1.003,
      circleExpMin = 0.997,
      circleExpSp = 0.00004,
      circlePulse = false;

    //circle class
    function Circle(background) {
      //if background, it has different rules
      this.background = (background || false);
      this.x = randRange(-canvas.width / 2, canvas.width / 2);
      this.y = randRange(-canvas.height / 2, canvas.height / 2);
      this.radius = background ? hyperRange(radMin, radMax) * backgroundMlt : hyperRange(radMin, radMax);
      this.filled = this.radius < radThreshold ? (randint(0, 100) > filledCircle ? false : 'full') : (randint(0, 100) > concentricCircle ? false : 'concentric');
      this.color = background ? bgColors[randint(0, bgColors.length - 1)] : colors[randint(0, colors.length - 1)];
      this.borderColor = background ? bgColors[randint(0, bgColors.length - 1)] : colors[randint(0, colors.length - 1)];
      this.opacity = 0.05;
      this.speed = (background ? randRange(speedMin, speedMax) / backgroundMlt : randRange(speedMin, speedMax)); // * (radMin / this.radius);
      this.speedAngle = Math.random() * 2 * Math.PI;
      this.speedx = Math.cos(this.speedAngle) * this.speed;
      this.speedy = Math.sin(this.speedAngle) * this.speed;
      var spacex = Math.abs((this.x - (this.speedx < 0 ? -1 : 1) * (canvas.width / 2 + this.radius)) / this.speedx),
        spacey = Math.abs((this.y - (this.speedy < 0 ? -1 : 1) * (canvas.height / 2 + this.radius)) / this.speedy);
      this.ttl = Math.min(spacex, spacey);
    };

    Circle.prototype.init = function() {
      Circle.call(this, this.background);
    }

    //support functions
    //generate random int a<=x<=b
    function randint(a, b) {
        return Math.floor(Math.random() * (b - a + 1) + a);
      }
      //generate random float
    function randRange(a, b) {
        return Math.random() * (b - a) + a;
      }
      //generate random float more likely to be close to a
    function hyperRange(a, b) {
      return Math.random() * Math.random() * Math.random() * (b - a) + a;
    }

    //rendering function
    function drawCircle(ctx, circle) {
      //circle.radius *= circleExp;
      var radius = circle.background ? circle.radius *= circleExp : circle.radius /= circleExp;
      ctx.beginPath();
      ctx.arc(circle.x, circle.y, radius * circleExp, 0, 2 * Math.PI, false);
      ctx.lineWidth = Math.max(1, circleBorder * (radMin - circle.radius) / (radMin - radMax));
      ctx.strokeStyle = ['rgba(', circle.borderColor, ',', circle.opacity, ')'].join('');
      if (circle.filled == 'full') {
        ctx.fillStyle = ['rgba(', circle.borderColor, ',', circle.background ? circle.opacity * 0.8 : circle.opacity, ')'].join('');
        ctx.fill();
        ctx.lineWidth=0;
        ctx.strokeStyle = ['rgba(', circle.borderColor, ',', 0, ')'].join('');
      }
      ctx.stroke();
      if (circle.filled == 'concentric') {
        ctx.beginPath();
        ctx.arc(circle.x, circle.y, radius / 2, 0, 2 * Math.PI, false);
        ctx.lineWidth = Math.max(1, circleBorder * (radMin - circle.radius) / (radMin - radMax));
        ctx.strokeStyle = ['rgba(', circle.color, ',', circle.opacity, ')'].join('');
        ctx.stroke();
      }
      circle.x += circle.speedx;
      circle.y += circle.speedy;
      if (circle.opacity < (circle.background ? maxOpacity : 1)) circle.opacity += 0.01;
      circle.ttl--;
    }

    //initializing function
    function init() {
      window.requestAnimationFrame(draw);
    }

    //rendering function
    function draw() {

      if (circlePulse) {
        if (circleExp < circleExpMin || circleExp > circleExpMax) circleExpSp *= -1;
        circleExp += circleExpSp;
      }
      var ctxfr = document.getElementById('canvas').getContext('2d');
      var ctxbg = document.getElementById('canvasbg').getContext('2d');

      ctxfr.globalCompositeOperation = 'destination-over';
      ctxfr.clearRect(0, 0, canvas.width, canvas.height); // clear canvas
      ctxbg.globalCompositeOperation = 'destination-over';
      ctxbg.clearRect(0, 0, canvas.width, canvas.height); // clear canvas

      ctxfr.save();
      ctxfr.translate(canvas.width / 2, canvas.height / 2);
      ctxbg.save();
      ctxbg.translate(canvas.width / 2, canvas.height / 2);

      //function to render each single circle, its connections and to manage its out of boundaries replacement
      function renderPoints(ctx, arr) {
        for (var i = 0; i < arr.length; i++) {
          var circle = arr[i];
          //checking if out of boundaries
          if (circle.ttl<0) {}
          var xEscape = canvas.width / 2 + circle.radius,
            yEscape = canvas.height / 2 + circle.radius;
          if (circle.ttl < -20) arr[i].init(arr[i].background);
          //if (Math.abs(circle.y) > yEscape || Math.abs(circle.x) > xEscape) arr[i].init(arr[i].background);
          drawCircle(ctx, circle);
        }
        for (var i = 0; i < arr.length - 1; i++) {
          for (var j = i + 1; j < arr.length; j++) {
            var deltax = arr[i].x - arr[j].x;
            var deltay = arr[i].y - arr[j].y;
            var dist = Math.pow(Math.pow(deltax, 2) + Math.pow(deltay, 2), 0.5);
            //if the circles are overlapping, no laser connecting them
            if (dist <= arr[i].radius + arr[j].radius) continue;
            //otherwise we connect them only if the dist is < linkDist
            if (dist < linkDist) {
              var xi = (arr[i].x < arr[j].x ? 1 : -1) * Math.abs(arr[i].radius * deltax / dist);
              var yi = (arr[i].y < arr[j].y ? 1 : -1) * Math.abs(arr[i].radius * deltay / dist);
              var xj = (arr[i].x < arr[j].x ? -1 : 1) * Math.abs(arr[j].radius * deltax / dist);
              var yj = (arr[i].y < arr[j].y ? -1 : 1) * Math.abs(arr[j].radius * deltay / dist);
              ctx.beginPath();
              ctx.moveTo(arr[i].x + xi, arr[i].y + yi);
              ctx.lineTo(arr[j].x + xj, arr[j].y + yj);
              var samecolor = arr[i].color == arr[j].color;
              ctx.strokeStyle = ["rgba(", arr[i].borderColor, ",", Math.min(arr[i].opacity, arr[j].opacity) * ((linkDist - dist) / linkDist), ")"].join("");
              ctx.lineWidth = (arr[i].background ? lineBorder * backgroundMlt : lineBorder) * ((linkDist - dist) / linkDist); //*((linkDist-dist)/linkDist);
              ctx.stroke();
            }
          }
        }
      }

      var startTime = Date.now();
      renderPoints(ctxfr, points);
      renderPoints(ctxbg, pointsBack);
      deltaT = Date.now() - startTime;

      ctxfr.restore();
      ctxbg.restore();

      window.requestAnimationFrame(draw);
    }

    init();

    /*Credits and aknowledgements:
    Original Idea and Design by Luca Luzzatti

    Optimizing tips from Benjamin Kästner
    General tips from Salvatore Previti*/
</script> -->
  <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js" integrity="sha384-cs/chFZiN24E4KMATLdqdvsezGxaGsi4hLGOzlXwp5UZB1LY//20VyM2taTB4QvJ" crossorigin="anonymous"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js" integrity="sha384-uefMccjFJAIv6A+rW+L4AHf99KvxDjWSu1z9VI8SKNVmz4sk7buKt/6v9KI65qnm" crossorigin="anonymous"></script>
</body>
</html>
